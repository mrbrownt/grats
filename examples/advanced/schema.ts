/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { node as queryNodeResolver } from "./graphql/Node";
import { nodes as queryNodesResolver } from "./graphql/Node";
import { id as userIdResolver } from "./graphql/Node";
import { id as postIdResolver } from "./graphql/Node";
import { nodes as postConnectionNodesResolver } from "./models/PostConnection";
import { posts as queryPostsResolver } from "./models/PostConnection";
import { nodes as userConnectionNodesResolver } from "./models/UserConnection";
import { users as queryUsersResolver } from "./models/UserConnection";
import { createPost as mutationCreatePostResolver } from "./models/Post";
import { createUser as mutationCreateUserResolver } from "./models/User";
import { GraphQLSchema, GraphQLObjectType, GraphQLInterfaceType, GraphQLID, GraphQLNonNull, GraphQLList, GraphQLString, GraphQLBoolean, GraphQLInt, GraphQLInputObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const NodeType: GraphQLInterfaceType = new GraphQLInterfaceType({
        description: "Indicates a stable refetchable object in the system.",
        name: "Node",
        fields() {
            return {
                id: {
                    description: "A globally unique opaque identifier for a node. Can be used to fetch the the\nnode with the `node` or `nodes` fields.\n\nSee: https://graphql.org/learn/global-object-identification/",
                    name: "id",
                    type: GraphQLID
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                id: {
                    description: "A globally unique opaque identifier for a node. Can be used to fetch the the\nnode with the `node` or `nodes` fields.\n\nSee: https://graphql.org/learn/global-object-identification/",
                    name: "id",
                    type: GraphQLID,
                    resolve(source) {
                        return userIdResolver(source);
                    }
                },
                name: {
                    description: "User's name. **Note:** This field is not guaranteed to be unique.",
                    name: "name",
                    type: GraphQLString
                },
                posts: {
                    description: "All posts written by this user. Note that there is no guarantee of order.",
                    name: "posts",
                    type: PostConnectionType
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const PostType: GraphQLObjectType = new GraphQLObjectType({
        name: "Post",
        description: "A blog post.",
        fields() {
            return {
                author: {
                    description: "The author of the post. This cannot change after the post is created.",
                    name: "author",
                    type: UserType
                },
                content: {
                    description: "Content of the post in markdown.",
                    name: "content",
                    type: GraphQLString
                },
                id: {
                    description: "A globally unique opaque identifier for a node. Can be used to fetch the the\nnode with the `node` or `nodes` fields.\n\nSee: https://graphql.org/learn/global-object-identification/",
                    name: "id",
                    type: GraphQLID,
                    resolve(source) {
                        return postIdResolver(source);
                    }
                },
                title: {
                    description: "The editor-approved title of the post.",
                    name: "title",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const PostEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "PostEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString
                },
                node: {
                    name: "node",
                    type: PostType
                }
            };
        }
    });
    const PageInfoType: GraphQLObjectType = new GraphQLObjectType({
        name: "PageInfo",
        fields() {
            return {
                endCursor: {
                    name: "endCursor",
                    type: GraphQLString
                },
                hasNextPage: {
                    name: "hasNextPage",
                    type: GraphQLBoolean
                },
                hasPreviousPage: {
                    name: "hasPreviousPage",
                    type: GraphQLBoolean
                },
                startCursor: {
                    name: "startCursor",
                    type: GraphQLString
                }
            };
        }
    });
    const PostConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "PostConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(PostEdgeType))
                },
                nodes: {
                    description: "Convenience field to get the nodes from a connection.",
                    name: "nodes",
                    type: new GraphQLList(new GraphQLNonNull(PostType)),
                    resolve(source) {
                        return postConnectionNodesResolver(source);
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType
                }
            };
        }
    });
    const UserEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "UserEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString
                },
                node: {
                    name: "node",
                    type: UserType
                }
            };
        }
    });
    const UserConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "UserConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(UserEdgeType))
                },
                nodes: {
                    description: "Convenience field to get the nodes from a connection.",
                    name: "nodes",
                    type: new GraphQLList(new GraphQLNonNull(UserType)),
                    resolve(source) {
                        return userConnectionNodesResolver(source);
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                node: {
                    description: "Fetch a single `Node` by its globally unique ID.",
                    name: "node",
                    type: NodeType,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(source, args, context) {
                        return queryNodeResolver(source, args, context);
                    }
                },
                nodes: {
                    description: "Fetch a list of `Node`s by their globally unique IDs.",
                    name: "nodes",
                    type: new GraphQLList(NodeType),
                    args: {
                        ids: {
                            name: "ids",
                            type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(GraphQLID)))
                        }
                    },
                    resolve(source, args, context) {
                        return queryNodesResolver(source, args, context);
                    }
                },
                posts: {
                    description: "All posts in the system. Note that there is no guarantee of order.",
                    name: "posts",
                    type: PostConnectionType,
                    args: {
                        after: {
                            name: "after",
                            type: GraphQLString
                        },
                        before: {
                            name: "before",
                            type: GraphQLString
                        },
                        first: {
                            name: "first",
                            type: GraphQLInt
                        },
                        last: {
                            name: "last",
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args, context) {
                        return queryPostsResolver(source, args, context);
                    }
                },
                users: {
                    description: "All users in the system. Note that there is no guarantee of order.",
                    name: "users",
                    type: UserConnectionType,
                    args: {
                        after: {
                            name: "after",
                            type: GraphQLString
                        },
                        before: {
                            name: "before",
                            type: GraphQLString
                        },
                        first: {
                            name: "first",
                            type: GraphQLInt
                        },
                        last: {
                            name: "last",
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args, context) {
                        return queryUsersResolver(source, args, context);
                    }
                }
            };
        }
    });
    const CreatePostPayloadType: GraphQLObjectType = new GraphQLObjectType({
        name: "CreatePostPayload",
        fields() {
            return {
                post: {
                    name: "post",
                    type: PostType
                }
            };
        }
    });
    const CreatePostInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "CreatePostInput",
        fields() {
            return {
                authorId: {
                    name: "authorId",
                    type: new GraphQLNonNull(GraphQLID)
                },
                content: {
                    name: "content",
                    type: new GraphQLNonNull(GraphQLString)
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const CreateUserPayloadType: GraphQLObjectType = new GraphQLObjectType({
        name: "CreateUserPayload",
        fields() {
            return {
                user: {
                    name: "user",
                    type: UserType
                }
            };
        }
    });
    const CreateUserInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "CreateUserInput",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                createPost: {
                    description: "Create a new post.",
                    name: "createPost",
                    type: CreatePostPayloadType,
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(CreatePostInputType)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationCreatePostResolver(source, args, context);
                    }
                },
                createUser: {
                    description: "Create a new user.",
                    name: "createUser",
                    type: CreateUserPayloadType,
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(CreateUserInputType)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationCreateUserResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [NodeType, CreatePostInputType, CreateUserInputType, CreatePostPayloadType, CreateUserPayloadType, MutationType, PageInfoType, PostType, PostConnectionType, PostEdgeType, QueryType, UserType, UserConnectionType, UserEdgeType]
    });
}
