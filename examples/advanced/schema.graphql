# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
"""Indicates a stable refetchable object in the system."""
interface Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
}

input CreatePostInput {
  authorId: ID!
  content: String!
  title: String!
}

input CreateUserInput {
  name: String!
}

type CreatePostPayload {
  post: Post
}

type CreateUserPayload {
  user: User
}

type Mutation {
  """Create a new post."""
  createPost(input: CreatePostInput!): CreatePostPayload
  """Create a new user."""
  createUser(input: CreateUserInput!): CreateUserPayload
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

"""A blog post."""
type Post implements Node {
  """The author of the post. This cannot change after the post is created."""
  author: User
  """Content of the post in markdown."""
  content: String
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
  """The editor-approved title of the post."""
  title: String
}

type PostConnection {
  edges: [PostEdge!]
  """Convenience field to get the nodes from a connection."""
  nodes: [Post!]
  pageInfo: PageInfo
}

type PostEdge {
  cursor: String
  node: Post
}

type Query {
  """Fetch a single `Node` by its globally unique ID."""
  node(id: ID!): Node
  """Fetch a list of `Node`s by their globally unique IDs."""
  nodes(ids: [ID!]!): [Node]
  """All posts in the system. Note that there is no guarantee of order."""
  posts(after: String, before: String, first: Int, last: Int): PostConnection
  """All users in the system. Note that there is no guarantee of order."""
  users(after: String, before: String, first: Int, last: Int): UserConnection
}

type User implements Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
  """User's name. **Note:** This field is not guaranteed to be unique."""
  name: String
  """
  All posts written by this user. Note that there is no guarantee of order.
  """
  posts: PostConnection
}

type UserConnection {
  edges: [UserEdge!]
  """Convenience field to get the nodes from a connection."""
  nodes: [User!]
  pageInfo: PageInfo
}

type UserEdge {
  cursor: String
  node: User
}
